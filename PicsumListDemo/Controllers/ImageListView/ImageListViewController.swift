//
//  ImageListViewController.swift
//  PicsumListDemo
//
//  Created by Papon Supamongkonchai on 24/4/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ImageListDisplayLogic: AnyObject
{
    func displayGetImagesPicsum(viewModel: ImageList.FetchImageURL.ViewModel)
    func displayLoadImage(viewModel: ImageList.GetImage.ViewModel)
}

class ImageListViewController: UIViewController, ImageListDisplayLogic
{
    @IBOutlet weak var imagesCollectionView: UICollectionView!
    
    var interactor: ImageListBusinessLogic?
    var router: (NSObjectProtocol & ImageListRoutingLogic & ImageListDataPassing)?
    
    private var imageURLs: [URL] = []
    private var loadedImageList: [URL: UIImage?] = [:]
    
    // MARK: Object lifecycle
    override func awakeFromNib() {
        super.awakeFromNib()
        setup()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        getImagesPicsum()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = ImageListInteractor()
        let presenter = ImageListPresenter()
        let router = ImageListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    //MARK: View
    private func setupView() {
        let nib = UINib(nibName: "ImageViewCell", bundle: nil)
        imagesCollectionView.register(nib, forCellWithReuseIdentifier: "ImageViewCell")
        
        imagesCollectionView.delegate = self
        imagesCollectionView.dataSource = self
    }
    
    // MARK: Function
    func getImagesPicsum() {
        interactor?.fetchImagesPicsum()
    }
    
    // MARK: ImageListDisplayLogic
    func displayGetImagesPicsum(viewModel: ImageList.FetchImageURL.ViewModel) {
        // Load a batch of images starting from the given index
        self.imageURLs = viewModel.urls.compactMap({ URL(string: $0)})
        imagesCollectionView.reloadData()
    }
    
    func displayLoadImage(viewModel: ImageList.GetImage.ViewModel) {
        let indexPath = IndexPath(item: viewModel.rowUpdate, section: 0)
        imagesCollectionView.reloadItems(at: [indexPath])
    }
}


extension ImageListViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return imageURLs.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ImageViewCell", for: indexPath) as! ImageViewCell
        cell.delegate = self
        if let imageDataCache = loadedImageList[imageURLs[indexPath.row]] ,
            let imageCache = imageDataCache {
            cell.setImageCache(image: imageCache)
        } else {
            cell.configureCell(imageUrl: imageURLs[indexPath.row])
        }
        
        return cell
    }

    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        cell.fadeAnimation()
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = self.view.bounds.width
        let height = CGFloat(300)
        return CGSize(width: width, height: height)
    }
}

extension ImageListViewController: ImageViewCellDelegate {
    func keepCacheImage(urlCache: URL,imageCache: UIImage?) {
        loadedImageList[urlCache] = imageCache
    }
}
