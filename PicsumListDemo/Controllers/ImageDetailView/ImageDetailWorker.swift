//
//  ImageDetailWorker.swift
//  PicsumListDemo
//
//  Created by Papon Supamongkonchai on 24/4/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ImageDetailWorkerInterface {
    func loadImageDetailInfo(id: Int ,success: @escaping (DetailDisplayModel) -> Void ,fail: @escaping (Error) -> Void)
    func loadImageBlur(url: String,success: @escaping (UIImage) -> Void ,fail: @escaping (Error) -> Void)
    func loadImageGrayScale(url: String,success: @escaping (UIImage) -> Void ,fail: @escaping (Error) -> Void)
}

class ImageDetailWorker: ImageDetailWorkerInterface
{
    var service: ImageDetailServiceInterface!
    
    init(service: ImageDetailServiceInterface) {
        self.service = service
    }
    
    func loadImageDetailInfo(id: Int ,success: @escaping (DetailDisplayModel) -> Void ,fail: @escaping (Error) -> Void) {
        let url = ImageLoaderManager.shared.getURLImageDetail(id: id)
        // Calling the method using the function-specific typealias
        service.loadImageDetail(url: url) { (result: Response<DetailDisplayModel>) in
            switch result {
            case .success(let response):
                success(response)
            case .failure(let error):
                fail(error)
            }
        }
    }
    
    func loadImageBlur(url: String,success: @escaping (UIImage) -> Void ,fail: @escaping (Error) -> Void) {
        ImageLoaderManager.shared.loadImage(from: url) { result in
            switch result {
            case .success(let imgBlurResult):
                success(imgBlurResult)
            case .failure(let error):
                fail(error)
            }
        }
    }
    
    func loadImageGrayScale(url: String,success: @escaping (UIImage) -> Void ,fail: @escaping (Error) -> Void) {
        ImageLoaderManager.shared.loadImage(from: url) { result in
            switch result {
            case .success(let imgGrayScaleResult):
                success(imgGrayScaleResult)
            case .failure(let error):
                fail(error)
            }
        }
    }
}
